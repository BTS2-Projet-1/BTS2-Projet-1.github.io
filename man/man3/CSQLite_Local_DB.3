.TH "CSQLite_Local_DB" 3 "Vendredi 8 Mai 2015" "Version 1.2.2" "Locker_Control" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CSQLite_Local_DB \- classe \fBCSQLite_Local_DB\fP, gestion des communications entre une base de données locale de type SQLite, avec l'application LC (LockerControl)\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <csqlite_local_db\&.h>\fP
.PP
Est dérivée de QObject\&.
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBCurrentProcessLoading\fP (QString, int)"
.br
.RI "\fISignal emit pour informer une instance qui s'y ait connecté l'état (avencé) de la tâche demendée\&. \fP"
.ti -1c
.RI "void \fBSlowProcess\fP (int)"
.br
.RI "\fISignal emit avec une valeur normalement utilisé pour effectuer un msleep() affin de ralentir le processus qui s'y ait connecté\&. \fP"
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBCSQLite_Local_DB\fP (\fBCLMS_DB\fP *LMS_Server=NULL)"
.br
.RI "\fIConstructeur de la classe 'CSQLite_Local_DB', hérite de 'QObject' affin de pouvoir émètre des signaux, pour certaines fonctions nécessitant l'information de l'évolution de la tâche demandée (sauvegarde de la base de données par exemple)\&. \fP"
.ti -1c
.RI "\fB~CSQLite_Local_DB\fP ()"
.br
.RI "\fIDestructeur de la classe 'CSQLite_Local_DB', Si la base de données à été ouverte, elle sera fermée et l'instance détruite\&. \fP"
.ti -1c
.RI "QList< QString > \fBDataBaseStatus\fP ()"
.br
.RI "\fIRécupères les informations de connexion avec la base de données, les tables, le driver utilisé\&.\&.\&. (Utilisation pour le mode debug)\&. \fP"
.ti -1c
.RI "bool \fBGet_DataBaseIsReady\fP ()"
.br
.RI "\fIPermet de récupérer la valeur (état), de la connexion et ouverture de la base de donnée\&. \fP"
.ti -1c
.RI "QString \fBlastError\fP ()"
.br
.RI "\fIRécupère la dèrenière erreur survenue suite a l'interation sur la base de données\&. \fP"
.ti -1c
.RI "QSqlQuery \fBSendQuery\fP (QString Query)"
.br
.RI "\fIFonction utilisée uniquement en mode débug pour un accès rapide d'envoi personalisé de requêtes au format SQL\&. \fP"
.ti -1c
.RI "QList< \fBstruct_DoorsStatus\fP > \fBSendQueryDoorsStatus\fP (QString Query)"
.br
.RI "\fIFonction utilisée uniquement en mode débug pour simuler l'accès de classe \fBCDoors\fP au portes des consignes automatiques\&. \fP"
.ti -1c
.RI "int \fBLogin\fP (QString)"
.br
.RI "\fIEffectue differentes vérifications avec le code d'identification passé en paramètre sur la base de données, pour en déterminer si il est valide et quel est le type d'utilisateur enregistré (Livreur ou opérateur de maintenance)\&. \fP"
.ti -1c
.RI "bool \fBSavePerfomAction\fP (QString Table, QString Action)"
.br
.RI "\fIEnregistre dans la base de données l'action suivante qui va être demandée, utilisée pour garder toutes les actions effectuée sur la base de données\&. Cette fonction est apeller avant un exec() d'un QSqlQuery par exemple\&. \fP"
.ti -1c
.RI "int \fBCheckExtractCode\fP (QString ExtractCode)"
.br
.RI "\fIRecherche dans la base de données si le code passé en paramètre est valide et peut être utilisé pour le retrait de colis\&. \fP"
.ti -1c
.RI "bool \fBDeleteExtractCode\fP (QString UsedExtractCode)"
.br
.RI "\fISupprime dans la base de données le code de retrait passé en paramètre et tout les colis lui appartenant, enfin libère la ou les consignes utilisées par le code de retrait\&. Pour ouvrir les consignes consernées il faut apeller la fonction OpenDoors() de la classe 'CDoors' avant de supprimer les codes de retrait, celle-ci ouvre la liste des consignes qui peut être récupérée avec \fBGetBoxesListConsumer()\fP qui retourne la liste des consignes utilisée par un cocde de retrait client\&. \fP"
.ti -1c
.RI "QList< int > \fBGetBoxesListConsumer\fP (QString ExtractCode)"
.br
.RI "\fIRecherche dans la base de données la liste des consignes utilisées par le code de retrait d'un client\&. \fP"
.ti -1c
.RI "QList< struct \fBstruct_DoorGeom\fP > \fBGetBoxesList\fP ()"
.br
.ti -1c
.RI "bool \fBUpdateLocalData\fP (QList< struct \fBstruct_PackagesUseBox\fP > UpdatedPackagesUseBoxList)"
.br
.RI "\fIMet à jour la base de données locale avec les informations envoyées au serveur LMS lors de la livraison\&. \fP"
.ti -1c
.RI "bool \fBSQL_Database_Manager\fP (int Option)"
.br
.RI "\fIFonction de traitement de la base de données, Crée une nouvelle base de données vide, par defaut, une sauvegarde, et charge une sauvegarde\&. \fP"
.ti -1c
.RI "QList< int > \fBGetFreeBoxes\fP ()"
.br
.RI "\fIRecherche dans la base de données les consignes non endommagées et libres\&. \fP"
.ti -1c
.RI "bool \fBSendQueryDoorsIsClosed\fP (QString Query)"
.br
.RI "\fIFonction utilisée uniquement en mode débug pour simuler l'accès de classe \fBCDoors\fP au portes des consignes automatiques\&. \fP"
.ti -1c
.RI "bool \fBSetDammagedBoxes\fP (QList< int > DammagedBoxes)"
.br
.RI "\fIMet à jour la base de données avec les portes/consignes signalées comme défectueses\&. \fP"
.ti -1c
.RI "bool \fBSetDammagedBox\fP (int DammagedBox)"
.br
.RI "\fIMet à jour la base de données avec l'indentifant de la porte/consigne signalée comme défectuese\&. \fP"
.ti -1c
.RI "bool \fBUnsetDammagedBoxes\fP (QList< int > FixedBoxes)"
.br
.RI "\fIMet à jour la base de données avec la liste des portes/consignes réparées\&. \fP"
.ti -1c
.RI "bool \fBUnsetDammagedBox\fP (int FixedBox)"
.br
.RI "\fIMet à jour la base de données avec l'identifant de la porte/consigne réparée\&. \fP"
.ti -1c
.RI "QList< int > \fBGetDammagedBoxes\fP ()"
.br
.RI "\fIRécupère dans la base de données la liste des portes/consignes signalées comme endomagées\&. \fP"
.ti -1c
.RI "bool \fBDataBase_AutoSave_Needed\fP ()"
.br
.RI "\fIFonction apellée automatiquement pas le systeme de mise à jour de la base de données, la sauvegarde est générée et envoyer au serveur LMS\&. \fP"
.ti -1c
.RI "QString \fBGet_SiteName\fP ()"
.br
.RI "\fIRécupère le nom du site actuel ou est installé la console de gestion des consignes automatiques, principalement utilisé pour identifier le site affin de récupérer la sauvegarde de la base de données correspondante au serveur LMS\&. \fP"
.ti -1c
.RI "bool \fBSet_SiteName\fP (QString SiteName)"
.br
.RI "\fIModifie le nom du site actuel ou est installé la console de gestion des consignes automatiques, principalement utilisé pour identifier le site affin de récupérer la sauvegarde de la base de données correspondante au serveur LMS\&. \fP"
.ti -1c
.RI "int \fBGet_NumberOfBoxes\fP ()"
.br
.RI "\fIRécupère dans la base de données ou est installé la console de gestion des consignes automatiques, le nombre des consignes installées et configurées sur le site (Libre + occupées + défectueuses)\&. Récupérer la liste des consignes libre pour la livraison est possible avec \fBGetFreeBoxes()\fP\&. \fP"
.ti -1c
.RI "bool \fBBoxIsDammaged\fP (int idBox)"
.br
.RI "\fIVérifie grâce à la base de données si la consigne signalée comme endommagée\&. \fP"
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "QList< QString > \fBReadSQL_File\fP (QString FilePath)"
.br
.RI "\fILit le contenu d'un fichier SQL, utilisée pour lire les fichiers de constructions ou de sauvegardes par exemple\&. \fP"
.ti -1c
.RI "bool \fBWriteSQL_File\fP (QString FilePath, QString Data)"
.br
.RI "\fIEcrit un fichier SQL en mode 'append', soit a la fin d'un fichier deja existant\&. \fP"
.ti -1c
.RI "bool \fBSaveDatabase\fP (QString FilePath)"
.br
.RI "\fISupprime l'ancien fichier et effectue une sauvegarde de la base de données actuel dans un fichier (chemain dans 'm_SQL_File_DatabaseLastSave_Path'), au format SQL qui est stocké en local en cas de rupture de communication vers le serveur LMS, avec emmission de signaux pour l'information de l'avencée du traitement\&. \fP"
.ti -1c
.RI "bool \fBLoadDatabaseSave\fP (QString FilePath)"
.br
.RI "\fICoupe la connexion avec la base de données et en crée une nouvelle avec les informations sauvegardées dans le fichier de sauvegarde, avec emmission de signaux pour l'information de l'avencée du traitement\&. \fP"
.ti -1c
.RI "bool \fBConnect_DB\fP ()"
.br
.RI "\fIEffectue la connexion d'une base de données avec le fichier SQLite de la base de données, si ce n'est pas possible (fichier inexistant par exemple) la fonction tente de créer une base de donnée\&. Si il existe les fichiers de sauvegarde, la nouvelle base de données sera construite avec sinon, si les fichiers des base SQL exixtent la nouvelle base de données sera construite avec\&. \fP"
.ti -1c
.RI "bool \fBDelete_DB\fP ()"
.br
.RI "\fIFerme la base de données précédament ouverte et la supprime (utilisée en fin de programme ou dans le cadre de mise à jour)\&. \fP"
.in -1c
.SH "Description détaillée"
.PP 
classe \fBCSQLite_Local_DB\fP, gestion des communications entre une base de données locale de type SQLite, avec l'application LC (LockerControl)\&. 


.PP
\fBAuteur:\fP
.RS 4
HOUDAYER Pierre
.RE
.PP
\fBVersion:\fP
.RS 4
2\&.6
.RE
.PP
\fBDate:\fP
.RS 4
7 mai 2015 
.RE
.PP

.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "CSQLite_Local_DB::CSQLite_Local_DB (\fBCLMS_DB\fP * LMS_Server = \fCNULL\fP)\fC [explicit]\fP"

.PP
Constructeur de la classe 'CSQLite_Local_DB', hérite de 'QObject' affin de pouvoir émètre des signaux, pour certaines fonctions nécessitant l'information de l'évolution de la tâche demandée (sauvegarde de la base de données par exemple)\&. Le constructeur initalise et ouvre la base de données automatiquement grâce aux attibuts de la classe\&. Si l'ouverture de la base de données est correcte un attibut 'm_DataBaseIsReady' accessible avec \fBGet_DataBaseIsReady()\fP qui revoie avec un booléen, si la connexion avec la base de données est effectuée sans erreurs vrai (true) ou avec un echec faux (false)\&.
.PP
Attention l'attibut 'm_DataBaseIsReady' peux être aussi mis à faux (false) si le pointeur passé en paramètre est égal à 'NULL', alors de la même façon que pour la connexion à une base de données, les fonctions membres n'effectueront aucunes actions\&.
.PP
Dans le cas ou le programme tente de réaliser des actions avec la base de données avec l'attibut 'm_DataBaseIsReady' égal à faux (false), les fonctions membres retouneront une erreur et aucunes actions demendées seront réalisées\&.
.PP
\fBParamètres:\fP
.RS 4
\fI\fBCLMS_DB\fP\fP *LMS_Server La classe \fBCSQLite_Local_DB\fP à besoin d'un pointeur valide sur une instance de la classe \fBCLMS_DB\fP, pour communiquer avec le serveur LMS (Sauvegrades et mises à jour par exemple)\&. 
.RE
.PP

.SS "CSQLite_Local_DB::~CSQLite_Local_DB ()"

.PP
Destructeur de la classe 'CSQLite_Local_DB', Si la base de données à été ouverte, elle sera fermée et l'instance détruite\&. 
.SH "Documentation des fonctions membres"
.PP 
.SS "bool CSQLite_Local_DB::BoxIsDammaged (int idBox)"

.PP
Vérifie grâce à la base de données si la consigne signalée comme endommagée\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIint\fP idBox Numéro de la consigne a vérifier\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si la consigne demmandée est signalée comme endommagée, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "int CSQLite_Local_DB::CheckExtractCode (QString ExtractCode)"

.PP
Recherche dans la base de données si le code passé en paramètre est valide et peut être utilisé pour le retrait de colis\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP ExtractCode, Avec 'ExtractCode' pour le code à vérifier\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un 'int', entier ayant pour valeur : -1 : si la base de données n'est pas ouverte\&. 0 : si le code de retrait est correct, mais il est expiré (14 jours par defaut)\&. 1 : si le code de retrait est valide et non expiré (Utilisable par le client)\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::Connect_DB ()\fC [protected]\fP"

.PP
Effectue la connexion d'une base de données avec le fichier SQLite de la base de données, si ce n'est pas possible (fichier inexistant par exemple) la fonction tente de créer une base de donnée\&. Si il existe les fichiers de sauvegarde, la nouvelle base de données sera construite avec sinon, si les fichiers des base SQL exixtent la nouvelle base de données sera construite avec\&. 
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen sur la réussite (true) ou l'échec (false) de la connexion a la base de données, en cas d'érreur il peut être utile d'appeller \fBlastError()\fP pour plus d'informations\&. 
.RE
.PP

.SS "void CSQLite_Local_DB::CurrentProcessLoading (QString, int)\fC [signal]\fP"

.PP
Signal emit pour informer une instance qui s'y ait connecté l'état (avencé) de la tâche demendée\&. 
.SS "bool CSQLite_Local_DB::DataBase_AutoSave_Needed ()"

.PP
Fonction apellée automatiquement pas le systeme de mise à jour de la base de données, la sauvegarde est générée et envoyer au serveur LMS\&. 
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si le traitement s'est effectuée, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "QList< QString > CSQLite_Local_DB::DataBaseStatus ()"

.PP
Récupères les informations de connexion avec la base de données, les tables, le driver utilisé\&.\&.\&. (Utilisation pour le mode debug)\&. 
.PP
\fBRenvoie:\fP
.RS 4
Retourne une 'QList<QString>', liste de QString contenant les informations de connexions, liste vide si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::Delete_DB ()\fC [protected]\fP"

.PP
Ferme la base de données précédament ouverte et la supprime (utilisée en fin de programme ou dans le cadre de mise à jour)\&. 
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen sur la réussite de la suppression de la base de données (true) ou l'échec (false) si la base de données n'est pas ouverte, en cas d'érreur il peut être utile d'appeller \fBlastError()\fP pour plus d'informations\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::DeleteExtractCode (QString UsedExtractCode)"

.PP
Supprime dans la base de données le code de retrait passé en paramètre et tout les colis lui appartenant, enfin libère la ou les consignes utilisées par le code de retrait\&. Pour ouvrir les consignes consernées il faut apeller la fonction OpenDoors() de la classe 'CDoors' avant de supprimer les codes de retrait, celle-ci ouvre la liste des consignes qui peut être récupérée avec \fBGetBoxesListConsumer()\fP qui retourne la liste des consignes utilisée par un cocde de retrait client\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP Table,QString Action, Avec 'Table' pour le nom de la table qui va être modifiée ou intérrogée et 'Action' pour la requête qui sera envoyée\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si la suppression s'est effectuée, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::Get_DataBaseIsReady ()\fC [inline]\fP"

.PP
Permet de récupérer la valeur (état), de la connexion et ouverture de la base de donnée\&. 
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si la base de donnée est prête pour l'utilisation, faux (false) sinon\&. 
.RE
.PP

.SS "int CSQLite_Local_DB::Get_NumberOfBoxes ()"

.PP
Récupère dans la base de données ou est installé la console de gestion des consignes automatiques, le nombre des consignes installées et configurées sur le site (Libre + occupées + défectueuses)\&. Récupérer la liste des consignes libre pour la livraison est possible avec \fBGetFreeBoxes()\fP\&. 
.PP
\fBRenvoie:\fP
.RS 4
Retourne un 'int', entier avec le nombre de consignes installées ou -1 si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "QString CSQLite_Local_DB::Get_SiteName ()"

.PP
Récupère le nom du site actuel ou est installé la console de gestion des consignes automatiques, principalement utilisé pour identifier le site affin de récupérer la sauvegarde de la base de données correspondante au serveur LMS\&. 
.PP
\fBRenvoie:\fP
.RS 4
Retourne un 'QString' avec le nom du site ou est installé la console de gestion des consignes automatiques ou vide si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "QList< struct \fBstruct_DoorGeom\fP > CSQLite_Local_DB::GetBoxesList ()"

.SS "QList< int > CSQLite_Local_DB::GetBoxesListConsumer (QString ExtractCode)"

.PP
Recherche dans la base de données la liste des consignes utilisées par le code de retrait d'un client\&. Récupère dans le base de données toutes les portes installées et indique l'état des portes, utilisée pour dessiner le plan de l'installation des consignes lors de la livraison\&.
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP ExtractCode, Avec 'ExtractCode' le code pour identifier les consignes utilisées par les colis qui lui sont liée\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne une 'QList<int>', liste avec les indentifiants des consignes utilisées pour le code de retrait sinon une liste vide, si le code de retrait n'est pas valide ou si la base de données n'est pas ouverte\&.
.PP
Retourne une 'QList<struct_DoorsStatus>', liste de structutre 'struct_DoorsStatus' contenant toutes les informations sur l'état mesuré de la porte, (Numéro, Ouverture, fermeture, verouillage\&.\&.\&.) ou une liste vide si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "QList< int > CSQLite_Local_DB::GetDammagedBoxes ()"

.PP
Récupère dans la base de données la liste des portes/consignes signalées comme endomagées\&. 
.PP
\fBRenvoie:\fP
.RS 4
Retourne la liste des des portes/consignes signalées comme endomagées sinon une liste vide si il y a aucunes portes/consignes signalées comme endomagées ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "QList< int > CSQLite_Local_DB::GetFreeBoxes ()"

.PP
Recherche dans la base de données les consignes non endommagées et libres\&. 
.PP
\fBRenvoie:\fP
.RS 4
Retourne une 'QList<int>', liste avec les indentifiants des consignes libres sinon une liste vide si aucune consignes disponibles ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "QString CSQLite_Local_DB::lastError ()"

.PP
Récupère la dèrenière erreur survenue suite a l'interation sur la base de données\&. 
.PP
\fBRenvoie:\fP
.RS 4
Retourne un 'QString', Avec le code d'erreur et sa description relevée\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::LoadDatabaseSave (QString FilePath)\fC [protected]\fP"

.PP
Coupe la connexion avec la base de données et en crée une nouvelle avec les informations sauvegardées dans le fichier de sauvegarde, avec emmission de signaux pour l'information de l'avencée du traitement\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP FilePath, Avec 'FilePath' le chemain du fichier de sauvegarde ('m_SQL_File_DatabaseLastSave_Path' ou 'm_SQL_File_DatabaseLastSave_Path_FromLMS')\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si le traitement s'est effectuée, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "int CSQLite_Local_DB::Login (QString IndentifiactionCode)"

.PP
Effectue differentes vérifications avec le code d'identification passé en paramètre sur la base de données, pour en déterminer si il est valide et quel est le type d'utilisateur enregistré (Livreur ou opérateur de maintenance)\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP IndentifiactionCode le code d'identification à vérifier\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un 'int', pour (Inclure 'DataStructures\&.h'): -5 : Si la base de données n'est pas ouverte -4 (UNDEFINED_USER) : Utilisateur non reconnu (non valide)\&. -3 (UNDEFINED_COMPANY_PASS) : Mauvais code de société (non valide)\&. -2 (UNDEFINED_PERSONAL_PASS) : Mauvais mot de passe personnel (non valide)\&. -1 (UNDEFINED_PASSWORD) : Mauvais mot de passe confidentiel (non valide)\&. 0 (LIVREUR) : Utilisateur autorisé est de type livreur (valide)\&. 1 (MAINTENANCE) : Utilisateur autorisé est de type opérateur de maintenance (valide)\&. 
.RE
.PP

.SS "QList< QString > CSQLite_Local_DB::ReadSQL_File (QString FilePath)\fC [protected]\fP"

.PP
Lit le contenu d'un fichier SQL, utilisée pour lire les fichiers de constructions ou de sauvegardes par exemple\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP FilePath, Avec 'FilePath' le chemain du fichier à lire\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne une QList<QString>, liste des requêtes SQL lues dans le fichier, liste vide sinon\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::SaveDatabase (QString FilePath)\fC [protected]\fP"

.PP
Supprime l'ancien fichier et effectue une sauvegarde de la base de données actuel dans un fichier (chemain dans 'm_SQL_File_DatabaseLastSave_Path'), au format SQL qui est stocké en local en cas de rupture de communication vers le serveur LMS, avec emmission de signaux pour l'information de l'avencée du traitement\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP FilePath, Avec 'FilePath' le chemain du fichier de sauvegarde ('m_SQL_File_DatabaseLastSave_Path')\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si le traitement s'est effectuée, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::SavePerfomAction (QString Table, QString Action)"

.PP
Enregistre dans la base de données l'action suivante qui va être demandée, utilisée pour garder toutes les actions effectuée sur la base de données\&. Cette fonction est apeller avant un exec() d'un QSqlQuery par exemple\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP Table,QString Action, Avec 'Table' pour le nom de la table qui va être modifiée ou intérrogée et 'Action' pour la requête qui sera envoyée\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si la commande est sauvegardée dans la base de données, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "QSqlQuery CSQLite_Local_DB::SendQuery (QString Query)"

.PP
Fonction utilisée uniquement en mode débug pour un accès rapide d'envoi personalisé de requêtes au format SQL\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP Query Requête souhaitée au format SQL\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un 'QSqlQuery' avec le retour de la requête souhaitée en paramètre, ou vide si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::SendQueryDoorsIsClosed (QString Query)"

.PP
Fonction utilisée uniquement en mode débug pour simuler l'accès de classe \fBCDoors\fP au portes des consignes automatiques\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP Query, Avec 'Query' la requête au format SQL pour 'SELECT * FROM DoorLocker WHERE DoorLocker_OpenState='true' AND Linked_idDoor='BoxNumber''
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si le traitement s'est effectuée, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "QList< \fBstruct_DoorsStatus\fP > CSQLite_Local_DB::SendQueryDoorsStatus (QString Query)"

.PP
Fonction utilisée uniquement en mode débug pour simuler l'accès de classe \fBCDoors\fP au portes des consignes automatiques\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP Query Requête souhaitée au format SQL = 'SELECT * FROM DoorLocker'\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne une 'QList<struct_DoorsStatus>', liste de structutre 'struct_DoorsStatus' contenant toutes les informations sur l'état mesuré de la porte, (Numéro, Ouverture, fermeture, verouillage\&.\&.\&.) ou une liste vide si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::Set_SiteName (QString SiteName)"

.PP
Modifie le nom du site actuel ou est installé la console de gestion des consignes automatiques, principalement utilisé pour identifier le site affin de récupérer la sauvegarde de la base de données correspondante au serveur LMS\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP SiteName Avec le nom du site souhaité\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen avec le succès de la commande (true) ou l'echec (false) en cas d'érreur il peut être utile d'appeller \fBlastError()\fP pour plus d'informations, ou faux (false) si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::SetDammagedBox (int DammagedBox)"

.PP
Met à jour la base de données avec l'indentifant de la porte/consigne signalée comme défectuese\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIint\fP DammagedBox, Avec 'DammagedBox' l'indentifant de la porte/consigne endomagée\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si le traitement s'est effectuée, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::SetDammagedBoxes (QList< int > DammagedBoxes)"

.PP
Met à jour la base de données avec les portes/consignes signalées comme défectueses\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQList<int>\fP DammagedBoxes, Avec 'DammagedBoxes' la liste d'indentifants des consignes endomagées\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si le traitement s'est effectuée, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "void CSQLite_Local_DB::SlowProcess (int)\fC [signal]\fP"

.PP
Signal emit avec une valeur normalement utilisé pour effectuer un msleep() affin de ralentir le processus qui s'y ait connecté\&. 
.SS "bool CSQLite_Local_DB::SQL_Database_Manager (int Option)"

.PP
Fonction de traitement de la base de données, Crée une nouvelle base de données vide, par defaut, une sauvegarde, et charge une sauvegarde\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIint\fP Option, Avec 'Option' Le traitement choisis comme (inclure le fichier 'DataStructures\&.h'): (EMPTY_DATABASE) = 1 : Construit une base de données avec les tables de l'application LC mais vide\&. (DEFAULT_DATABASE) = 2 : Construit une base de données avec les tables de l'application LC mais remplient avec les données par defaut de test\&. (SAVE_DATABASE) = 3 : Effectue une sauvegarde de la base de données actuel dans un fichier au format SQL\&. (LOAD_SAVE_DATABASE) = 4 : Charge la dernière sauvegarde de la base de données effectuée\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si le traitement s'est effectuée, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::UnsetDammagedBox (int FixedBox)"

.PP
Met à jour la base de données avec l'identifant de la porte/consigne réparée\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIint\fP FixedBox, Avec 'FixedBox' l'indentifant de la porte/consigne réparée\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si le traitement s'est effectuée, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::UnsetDammagedBoxes (QList< int > FixedBoxes)"

.PP
Met à jour la base de données avec la liste des portes/consignes réparées\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQList<int>\fP FixedBoxes, Avec 'FixedBoxes' l'indentifant des portes/consignes réparées\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si le traitement s'est effectuée, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::UpdateLocalData (QList< struct \fBstruct_PackagesUseBox\fP > UpdatedPackagesUseBoxList)"

.PP
Met à jour la base de données locale avec les informations envoyées au serveur LMS lors de la livraison\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQList<struct\fP \fBstruct_PackagesUseBox\fP> UpdatedPackagesUseBoxList, Avec 'UpdatedPackagesUseBoxList' la liste des colis utilisant les consignes et les codes de retrait associées\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne un booléen, à vrai (true) si la mise à jour s'est effectuée, faux (false) sinon ou si la base de données n'est pas ouverte\&. 
.RE
.PP

.SS "bool CSQLite_Local_DB::WriteSQL_File (QString FilePath, QString Data)\fC [protected]\fP"

.PP
Ecrit un fichier SQL en mode 'append', soit a la fin d'un fichier deja existant\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIQString\fP FilePath, QString Data, Avec 'FilePath' le chemain du fichier ou écrire les 'Data', données au format SQL\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Retourne une QList<QString>, liste des requêtes SQL lues dans le fichier, liste vide sinon\&. 
.RE
.PP


.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour Locker_Control à partir du code source\&.
